
#line 3 "scanner.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[921] =
    {   0,
      162,   65,  161,   64,   65,  161,   63,  161,   65,  161,
       60,   65,  161,   61,   65,  161,   60,   65,  161,   60,
       65,  161,   60,   65,  161,   60,   65,  161,   60,   65,
      161,   60,   65,  161,   60,   65,  161,   60,   65,  161,
       60,   65,  161,   60,   65,  161,   60,   65,  161,   60,
       65,  161,   60,   65,  161,   60,   65,  161,   60,   65,
      161,   60,   65,  161,   60,   65,  161,   60,   65,  161,
       60,   65,  161,   70,   72,  161,16452,   71,   72,  161,
       73,  161,   72,  161,   70,   72,  161,16452,   66,   72,
      161,16452,   69,   70,   72,  161,16452,   77,   79,  161,

       78,   79,  161,   80,  161,   79,  161,   77,   79,  161,
       74,   79,  161,   76,   77,   79,  161,   85,  161,   84,
      161,   85,  161,   83,   85,  161,   81,   85,  161,   96,
      161,   95,   96,  161,   98,  161,   96,  161,   94,   96,
      161,  101,  161,  100,  101,  161,  103,  161,  101,  161,
       99,  101,  161,  106,  161,  105,  106,  161,  108,  161,
      106,  161,  104,  106,  161,  131,  161,  130,  131,  161,
      133,  161,  131,  161,  129,  131,  161,  131,  161,  131,
      161,  131,  161,  131,  161,  131,  161,  131,  161,  131,
      161,  131,  161,  131,  161,  131,  161,  131,  161,  134,

      161,  136,  161,  137,  161,   92,  161,   91,  161,   92,
      161,   89,   92,  161,   90,   92,  161,   86,   92,  161,
      141,  161,  140,  141,  161,  143,  161,  141,  161,  139,
      141,  161,  139,  141,  161,  147,  161,  146,  147,  161,
      149,  161,  147,  161,  145,  147,  161,  145,  147,  161,
      161,   93,  161,  152,  161,  151,  152,  161,  154,  161,
      152,  161,  150,  152,  161,  158,  161,  157,  158,  161,
      160,  161,  158,  161,  155,  158,  161,  156,  158,  161,
       62,   60,   60,   59,   60,   60,   60,   39,   59,   16,
       59,   60,   60,   60,   60,   13,   59,   60,   60,   60,

       22,   59,   60,    9,   59,   60,   51,   59,   15,   59,
       11,   59,   60,   60,   20,   59,   60,   60,   60,   38,
       59,   60,   60,   60,   60,   49,   59,   60,   60,   60,
       53,   59,   60,   60,    6,   59,   60,   60,   56,   59,
       60,   60,   60,   70,16452,16452, 8260,   70,16452,   67,
       77,   77,   75,   84,   83,   82,   97,   94,  102,   99,
      107,  104,  132,  129,  134,  135,   91,   89,   90,   88,
       87,  142,  139,  139,  148,  145,  145,  153,  150,  159,
      155,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       94,   94,  119,  123,  127,  117,  113,  128,  116,  122,
      121,  118,  120,  109,  126,  125,  114,  124,  115,  112,
      110,  111,  138,  139,  145,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   94,   94,  145,   60,   60,
       60,   60,   60,   60,   60,   60,   17,   59,   18,   59,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   35,   59,   60,   60,   60,   60,   60,
       60,   60,   45,   59,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   94,   94,  145,   60,   60,
       60,    5,   59,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   44,   59,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       94,   94,  144,  145,   60,    1,   59,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   46,   59,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   94,   94,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   21,
       59,   60,   60,   60,   60,   60,   60,   60,   60,   31,
       59,   60,   60,   60,   60,   60,   60,   60,   60,   42,
       59,   60,   60,   60,   60,   60,   60,   60,   60,   57,
       59,   60,   94,   94,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   30,   59,   60,   60,   60,   60,   60,

       40,   59,   41,   59,   60,   47,   59,   60,   60,   60,
       60,   60,   60,   60,   94,   60,   60,   60,   60,   60,
       60,   10,   59,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   37,
       59,   60,   60,   60,   60,   52,   59,   60,   60,   60,
       94,   60,   60,    4,   59,   60,   60,   60,   60,   60,
       60,   60,   60,   19,   59,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   55,   59,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   23,   59,   60,   60,   25,   59,

       60,   60,   60,   60,   60,   60,   60,   43,   59,   60,
       60,   54,   59,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   24,   59,   26,   59,   27,   59,   60,   60,
       60,   60,   60,   36,   59,   48,   59,   60,   60,   60,
       60,   60,    8,   59,   60,   60,   60,   60,   60,   60,
       60,   60,   34,   59,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,    2,   59,
        3,   59,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   14,   59,   60,   60,   60,   60,
       60,   58,   59,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   32,   59,   60,   50,   59,    7,
       59,   12,   59,   28,   59,   60,   33,   59,   29,   59
    } ;

static yyconst flex_int16_t yy_accept[750] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   11,   14,   17,   20,   23,
       26,   29,   32,   35,   38,   41,   44,   47,   50,   53,
       56,   59,   62,   65,   68,   71,   74,   78,   81,   83,
       85,   89,   93,   98,  101,  104,  106,  108,  111,  114,
      118,  120,  122,  124,  127,  130,  132,  135,  137,  139,
      142,  144,  147,  149,  151,  154,  156,  159,  161,  163,
      166,  168,  171,  173,  175,  178,  180,  182,  184,  186,

      188,  190,  192,  194,  196,  198,  200,  202,  204,  206,
      208,  210,  212,  215,  218,  221,  223,  226,  228,  230,
      233,  236,  238,  241,  243,  245,  248,  251,  252,  254,
      256,  259,  261,  263,  266,  268,  271,  273,  275,  278,
      281,  282,  283,  284,  285,  286,  287,  288,  290,  292,
      293,  294,  295,  296,  298,  299,  300,  301,  303,  304,
      306,  307,  309,  311,  313,  314,  315,  317,  318,  319,
      320,  322,  323,  324,  325,  326,  328,  329,  330,  331,
      333,  334,  335,  337,  338,  339,  341,  342,  343,  344,
      346,  346,  347,  348,  348,  350,  351,  352,  352,  353,

      354,  354,  355,  355,  356,  356,  357,  358,  358,  359,
      360,  361,  362,  363,  364,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  366,  367,  367,  368,  368,  369,
      370,  370,  371,  372,  373,  374,  375,  376,  377,  378,
      379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
      399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
      409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
      419,  420,  421,  421,  422,  423,  424,  425,  426,  427,

      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  445,  446,  447,  448,
      449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
      459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
      469,  470,  471,  472,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      489,  490,  491,  492,  493,  494,  495,  496,  497,  499,
      501,  502,  503,  504,  505,  506,  507,  508,  509,  510,
      511,  512,  513,  514,  516,  517,  518,  519,  520,  521,
      522,  523,  525,  526,  527,  528,  529,  530,  531,  532,

      533,  534,  535,  536,  537,  538,  539,  540,  541,  542,
      544,  545,  546,  547,  548,  549,  550,  551,  552,  553,
      554,  555,  556,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  570,  571,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  581,  582,  583,  585,
      586,  588,  589,  590,  591,  592,  593,  594,  595,  596,
      597,  598,  599,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      617,  619,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  629,  630,  631,  632,  633,  634,  635,  636,  637,

      638,  639,  640,  642,  643,  644,  645,  646,  647,  648,
      649,  650,  652,  653,  654,  655,  656,  657,  658,  659,
      660,  662,  663,  664,  665,  666,  667,  668,  669,  670,
      672,  673,  674,  675,  676,  677,  678,  679,  680,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  690,  691,
      692,  693,  694,  696,  697,  698,  699,  700,  701,  703,
      705,  706,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  724,  725,  726,
      727,  728,  729,  730,  731,  732,  733,  734,  735,  736,
      737,  738,  739,  740,  742,  743,  744,  745,  746,  748,

      749,  750,  751,  752,  753,  754,  756,  757,  758,  759,
      760,  761,  762,  763,  764,  766,  767,  768,  769,  770,
      771,  772,  773,  774,  775,  776,  777,  778,  779,  780,
      781,  782,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  793,  794,  795,  797,  798,  799,  801,  802,  803,
      804,  805,  806,  807,  808,  810,  811,  812,  814,  815,
      816,  817,  818,  819,  820,  821,  822,  823,  825,  827,
      829,  830,  831,  832,  833,  834,  836,  838,  839,  840,
      841,  842,  843,  845,  846,  847,  848,  849,  850,  851,
      852,  853,  855,  856,  857,  858,  859,  860,  861,  862,

      863,  864,  865,  866,  867,  868,  869,  871,  873,  874,
      875,  876,  877,  878,  879,  880,  881,  882,  883,  884,
      885,  887,  888,  889,  890,  891,  892,  894,  895,  896,
      897,  898,  899,  900,  901,  902,  903,  904,  905,  907,
      908,  910,  912,  914,  916,  917,  919,  921,  921
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    5,    1,    5,    7,
        8,    9,    5,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
        1,   17,   12,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       18,   19,   18,    1,    5,    5,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   12,    1,   12,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    3,    4,    5,    6,    6,    4,    7,
        8,    9,    8,   10,   11,   12,   13,   14,   15,   16,
       16,   16,   16,   16,   16,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17
    } ;

static yyconst flex_int16_t yy_base[796] =
    {   0,
        0,   19,   64,   83,  102,  121,  128,  138,  157,    0,
      202,  206,  209,  212,  224,  265,    6,   71,  216,  226,
      307,    0,  352,  375, 1859, 1858,  397,  421,  446,  465,
     1862, 1986, 1986, 1986, 1858,    0, 1986, 1846,  224, 1845,
      245,   74,  112,  204,   63, 1844, 1843,  256,  217,  238,
      392,  446,   79,  263,  246,  343,  234, 1986, 1986, 1986,
      486,  269,  505,    0, 1986, 1986, 1986,  524, 1986,  543,
      472, 1986, 1853, 1986, 1849, 1986, 1986, 1986, 1848, 1840,
     1986, 1986, 1986, 1846,    0, 1986, 1986, 1986, 1845, 1834,
     1986, 1986, 1986, 1843, 1832,  108, 1820,  256, 1808,  241,

      253, 1805, 1816,  364,  255, 1812,    0, 1986, 1832,  545,
     1986, 1831, 1986, 1986,  138, 1986, 1986, 1986, 1828,    0,
     1802, 1986, 1986, 1986, 1825,    0, 1796, 1986, 1986, 1986,
     1986, 1986, 1820,    0, 1986, 1986, 1986, 1817,    0, 1986,
     1986,    0, 1805, 1986,  278,  372,  358, 1986, 1986,  258,
      347,  218,  388, 1986,  391,  415,  360, 1986,  399, 1986,
      140, 1986, 1986, 1986,  393,  423, 1986,  469,  494,  482,
     1986,  351,  544,  400,  465, 1986,  401,  450,  525, 1986,
      483, 1804, 1986,  495,  504, 1986,  437,  533,  417,  561,
      539,  569, 1986,  571,    0, 1986,    0, 1799,    0, 1986,

      571, 1986, 1811, 1986, 1806, 1986, 1986,    0, 1798, 1986,
        0, 1986, 1793, 1986, 1792, 1767, 1776, 1777, 1777, 1767,
     1755, 1760,  504,  490, 1759, 1750, 1750, 1746, 1749, 1750,
     1742, 1757, 1757,    0, 1986,  588, 1986, 1776, 1986, 1986,
      144, 1986, 1986, 1986,    0, 1741, 1986,    0, 1749, 1986,
        0, 1986,    0,  558,  562,  551,  554,  570,  575,  579,
      580,  583,  586,  584,  588,  589,  229,  592,  292,  591,
      516,  594,  595,  596,  604,  599,  608,  607,  609,  610,
      611,  616,  613,  627,  626,  621,  629,  628,  614, 1757,
      630,  647,  629, 1752, 1715, 1986, 1986, 1986, 1986, 1986,

     1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986,
     1986, 1986, 1986, 1986, 1986,    0, 1692,  634,  644,  645,
      646,  652,  651, 1692, 1691,  653,  658,  659, 1690,  660,
      663,  668,  662,  665,  667,  671,  675,  679,  677, 1689,
      678,  680,  686,  688,  687,  689, 1688,  690,  694,  695,
      706,  693,  696,  697,  715,  709,  719, 1691, 1690, 1661,
      710,  726,  728,  712,  721,  727,  729,  730, 1986, 1986,
      736, 1681,  733,  734,  738,  739,  740,  742,  747,  748,
      746,  745,  754, 1986,  476,  765,  762,  767,  751,  768,
     1671, 1986,  752,  771,  772,  773,  776,  777,  778,  780,

      779,  786,  782, 1649, 1647, 1612,  791,  784,  792, 1986,
      789,  790,  797,  793,  794,  795,  807,  810,  811,  812,
      815,  813,  817,  820,  821,  823,  826,  828,  833,  825,
      829,  837,  838,  841, 1986, 1635,  845,  854,  842,  852,
      843,  855,  856,  859,  860,  863, 1632, 1631,    0,  864,
     1986,  865,  869,  873,  870, 1626,  875, 1620,  882,  879,
     1618,  877,  880,  883,  885,  889,  890,  891,  892, 1617,
      893,  894,  897,  900,  903,  902,  905,  910, 1610,  913,
     1986,  909,  916, 1601,  912,  917,  918,  925,  928, 1584,
      931, 1580, 1571,  932,  935,  939,  937,  945,  940,  942,

      949,  943, 1986,  956,  955,  957,  960,  963,  965,  964,
     1562, 1986,  967,  968,  969,  970, 1561,  976, 1560, 1559,
     1986,  971, 1558,  973,  978,  982,  980,  984,  985, 1986,
      995, 1560, 1557,  986,  993,  997,  999, 1000,  998, 1552,
     1002, 1007, 1014, 1008, 1010, 1011, 1019, 1013, 1015, 1021,
     1022, 1029, 1986, 1028, 1032, 1033, 1548, 1037, 1986, 1986,
     1040, 1986, 1043, 1034, 1547, 1546, 1045, 1046, 1047, 1549,
     1049, 1051, 1544, 1052, 1053, 1056, 1986, 1057, 1054, 1060,
     1061, 1064, 1543, 1067, 1065, 1072, 1073, 1075, 1086, 1084,
     1088, 1076, 1089, 1986, 1083, 1094, 1091, 1096, 1986, 1100,

     1542, 1101, 1543, 1102, 1103, 1986, 1104, 1105, 1107, 1110,
     1112, 1106, 1121, 1115, 1986, 1538, 1120, 1122, 1314, 1123,
     1124, 1134, 1135, 1136, 1137, 1139, 1313, 1312, 1140, 1143,
     1311, 1986, 1147, 1150, 1145, 1310, 1146, 1148, 1152, 1156,
     1155, 1157, 1309, 1986, 1308, 1306, 1986, 1304, 1168, 1169,
     1163, 1170, 1175, 1302, 1986, 1301, 1178, 1986, 1171, 1173,
     1186, 1176, 1300, 1180, 1187, 1190, 1189, 1986, 1986, 1986,
     1193, 1191, 1194, 1197, 1299, 1986, 1986, 1199, 1205, 1206,
     1207, 1213, 1986, 1210, 1212, 1214, 1297, 1215, 1219, 1222,
     1221, 1986, 1216, 1220, 1296, 1295, 1225, 1232, 1235, 1233,

     1236, 1237, 1238, 1240, 1242, 1249, 1986, 1986, 1250, 1246,
     1293, 1288, 1252, 1251, 1253, 1254, 1255, 1158, 1262, 1263,
     1986, 1264, 1258, 1267, 1270, 1271, 1986, 1274, 1279, 1275,
     1282,  395, 1284,  348,  291,  142,  101, 1285, 1986,   98,
     1986, 1986, 1986, 1986,   55, 1986, 1986, 1986, 1329, 1346,
     1363, 1380, 1397, 1414, 1431, 1448, 1465, 1482, 1499, 1516,
     1533, 1547, 1561, 1578, 1595, 1612, 1629, 1646, 1663, 1680,
     1691, 1705, 1722, 1739, 1756, 1284, 1770, 1780, 1793, 1809,
     1825, 1289, 1836, 1847, 1858, 1869, 1880, 1891, 1902, 1913,
     1924, 1935, 1946, 1957, 1968

    } ;

static yyconst flex_int16_t yy_def[796] =
    {   0,
      749,  748,  750,  750,  751,  751,  752,  752,  748,    9,
      753,  753,  754,  754,  755,  755,  756,  756,  757,  757,
      748,   21,  758,  758,  759,  759,  760,  760,  761,  761,
      748,  748,  748,  748,  748,  762,  748,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  764,  748,  748,  748,
      765,  766,  765,  767,  748,  748,  748,  768,  748,  768,
      769,  748,  770,  748,  748,  748,  748,  748,  748,  771,
      748,  748,  748,  748,  772,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  773,  748,  748,  774,
      748,  775,  748,  748,  748,  748,  748,  748,  748,  776,
      776,  748,  748,  748,  748,  777,  777,  748,  748,  748,
      748,  748,  748,  778,  748,  748,  748,  748,  779,  748,
      748,  762,  763,  748,  763,  763,  763,  748,  748,  763,
      763,  763,  763,  748,  763,  763,  763,  748,  763,  748,
      763,  748,  748,  748,  763,  763,  748,  763,  763,  763,
      748,  763,  763,  763,  763,  748,  763,  763,  763,  748,
      763,  763,  748,  763,  763,  748,  763,  763,  763,  764,
      748,  766,  748,  780,   63,  748,  767,  781,   70,  748,

      769,  748,  770,  748,  748,  748,  748,  782,  783,  748,
      772,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  773,  748,  774,  748,  775,  748,  748,
      748,  748,  748,  748,  776,  776,  748,  777,  777,  748,
      778,  748,  779,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  780,  784,  785,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  776,  777,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  786,  787,  777,
      763,  763,  763,  763,  763,  763,  763,  763,  748,  748,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  748,  763,  763,  763,  763,  763,  763,
      763,  748,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  788,  789,  777,  763,  763,  763,  748,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  748,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  790,  791,  777,  763,
      748,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      748,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  792,  793,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  748,  763,  763,  763,  763,  763,  763,  763,
      763,  748,  763,  763,  763,  763,  763,  763,  763,  763,
      748,  763,  763,  763,  763,  763,  763,  763,  763,  748,
      763,  794,  748,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  748,  763,  763,  763,  763,  763,  748,  748,
      763,  748,  763,  763,  763,  763,  763,  763,  763,  795,
      763,  763,  763,  763,  763,  763,  748,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  748,  763,  763,  763,  763,  748,  763,

      763,  763,  748,  763,  763,  748,  763,  763,  763,  763,
      763,  763,  763,  763,  748,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  748,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  748,  763,  763,  748,  763,  763,  763,
      763,  763,  763,  763,  748,  763,  763,  748,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  748,  748,  748,
      763,  763,  763,  763,  763,  748,  748,  763,  763,  763,
      763,  763,  748,  763,  763,  763,  763,  763,  763,  763,
      763,  748,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  748,  748,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      748,  763,  763,  763,  763,  763,  748,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  748,  763,
      748,  748,  748,  748,  763,  748,  748,    0,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748

    } ;

static yyconst flex_int16_t yy_nxt[2032] =
    {   0,
       32,   33,   34,   35,  748,   37,   32,   32,  108,  109,
      748,   32,  748,   32,   32,   32,   32,   32,   32,   32,
       33,   34,   35,   38,   37,   32,   32,   38,   38,   38,
       32,   38,   32,   32,   32,   32,   32,   32,   39,   40,
       41,   42,   43,   44,   38,   38,   45,   38,   46,   47,
       48,   38,   49,   50,   38,   51,   52,   53,   54,   55,
       56,   38,   38,   38,   57,   58,   59,   60,  747,   62,
       57,   57,   63,  108,  109,   57,  160,   57,   57,   60,
       60,   57,   57,   57,   58,   59,   60,  144,   62,   57,
       57,   63,  180,  153,   57,  161,   57,   57,   60,   60,

       57,   57,   64,   65,   66,   67,  181,   69,   64,   64,
       70,  746,  182,   64,  744,   64,   67,   67,   67,   64,
       64,   64,   65,   66,   67,  154,   69,   64,   64,   70,
       72,   73,   64,   74,   64,   67,   67,   67,   64,   64,
       72,   73,  216,   74,  242,  243,   75,  217,  155,  266,
      242,  243,  156,  144,  157,  743,   75,   76,   77,   78,
       79,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   81,   82,   83,   84,   81,   82,   83,   84,
       87,   88,   89,   87,   88,   89,   81,  158,  111,  112,
       81,   90,  113,  114,   90,   92,   93,   94,  111,  112,
      167,  144,  113,  114,  115,  191,   95,  144,  331,  192,
      159,  260,  144,   96,  115,  145,   97,  169,   98,   99,
      193,  144,  100,  168,  146,  101,  102,  103,  149,  186,
      222,  104,  105,  147,  150,  106,   92,   93,   94,  164,
      191,  144,  224,  187,  170,  165,  183,   95,  151,  219,
      223,  231,  152,  166,   96,  193,  225,   97,  258,   98,
       99,  144,  220,  100,  232,  184,  101,  102,  103,  254,

      185,  333,  104,  105,  742,  144,  106,  116,  117,  118,
      119,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  121,  120,  120,  120,  120,  120,
      120,  120,  122,  123,  124,  125,  144,  122,  122,  122,
      144,  741,  188,  122,  144,  122,  122,  122,  122,  122,
      122,  144,  275,  144,  127,  122,  123,  124,  125,  259,
      122,  122,  122,  228,  189,  144,  122,  229,  122,  122,
      122,  122,  122,  122,  264,  255,  257,  127,  131,  132,

      133,  144,  256,  230,  144,  171,  144,  134,  739,  134,
      134,  172,  144,  144,  144,  173,  134,  134,  134,  134,
      134,  134,  131,  132,  133,  174,  261,  262,  144,  175,
      144,  134,  265,  134,  134,  267,  144,  283,  263,  281,
      134,  134,  134,  134,  134,  134,  135,  136,  137,  138,
      144,  140,  135,  135,  268,  269,  290,  135,  292,  176,
      135,  135,  135,  144,  135,  135,  136,  137,  138,  177,
      140,  135,  135,  178,  202,  203,  135,  204,  144,  135,
      135,  135,  144,  135,  284,  179,  190,  194,  282,  144,
      205,  192,  190,  190,  270,  144,  144,  190,  428,  190,

      190,  196,  193,  190,  190,  190,  194,  144,  144,  273,
      192,  190,  190,  271,  287,  274,  190,  144,  190,  190,
      196,  193,  190,  190,  197,  198,  305,  289,  272,  144,
      197,  197,  288,  306,  303,  197,  304,  197,  144,  200,
      191,  197,  197,  197,  198,  285,  144,  237,  238,  197,
      197,  239,  240,  335,  197,  193,  197,  144,  200,  286,
      197,  197,  191,  241,  144,  276,  192,  144,  277,  291,
      191,  144,  194,  202,  203,  144,  204,  193,  278,  279,
      321,  318,  280,  144,  320,  193,  196,  193,  144,  205,
      237,  238,  144,  144,  239,  240,  144,  144,  319,  144,

      322,  144,  144,  325,  144,  144,  241,  144,  144,  144,
      334,  328,  144,  323,  324,  332,  326,  144,  327,  329,
      144,  144,  144,  144,  144,  330,  144,  144,  337,  144,
      336,  342,  341,  340,  144,  338,  349,  343,  339,  144,
      144,  144,  144,  144,  196,  748,  345,  144,  344,  346,
      355,  347,  353,  348,  350,  352,  357,  144,  144,  144,
      144,  366,  356,  351,  144,  144,  144,  354,  361,  364,
      367,  144,  144,  144,  368,  144,  144,  376,  144,  365,
      144,  144,  362,  374,  144,  377,  363,  375,  144,  371,
      144,  144,  144,  144,  380,  373,  372,  378,  382,  144,

      144,  144,  144,  144,  379,  387,  144,  144,  144,  144,
      144,  381,  391,  393,  385,  389,  386,  394,  396,  144,
      383,  395,  144,  144,  401,  144,  398,  397,  144,  388,
      390,  400,  144,  399,  144,  408,  402,  409,  403,  144,
      144,  410,  144,  144,  411,  416,  144,  144,  407,  144,
      414,  144,  144,  144,  413,  144,  417,  412,  144,  144,
      144,  144,  415,  427,  144,  144,  426,  144,  418,  422,
      423,  419,  424,  425,  429,  144,  432,  434,  144,  420,
      144,  144,  421,  431,  144,  144,  144,  433,  436,  144,
      144,  144,  144,  144,  439,  144,  438,  144,  444,  144,

      450,  430,  144,  144,  451,  144,  144,  144,  144,  437,
      144,  452,  440,  441,  443,  453,  442,  455,  445,  456,
      144,  446,  460,  144,  144,  144,  144,  454,  144,  457,
      144,  458,  459,  144,  144,  464,  144,  473,  144,  144,
      462,  144,  144,  468,  461,  471,  144,  463,  476,  465,
      144,  144,  477,  467,  144,  144,  144,  466,  144,  469,
      480,  479,  472,  483,  482,  144,  470,  144,  144,  144,
      474,  475,  144,  144,  487,  478,  144,  144,  144,  485,
      484,  486,  144,  144,  489,  490,  144,  494,  144,  488,
      144,  501,  144,  144,  495,  144,  144,  496,  144,  500,

      498,  491,  144,  144,  144,  144,  144,  144,  508,  497,
      144,  502,  507,  144,  499,  144,  144,  514,  144,  506,
      504,  505,  144,  144,  518,  144,  144,  510,  509,  144,
      144,  144,  513,  515,  523,  511,  517,  522,  144,  516,
      526,  144,  519,  520,  144,  144,  525,  524,  144,  527,
      144,  529,  144,  144,  535,  144,  144,  531,  144,  539,
      537,  528,  144,  536,  534,  546,  538,  545,  144,  144,
      144,  541,  542,  144,  547,  540,  144,  144,  144,  543,
      144,  144,  144,  144,  144,  558,  144,  544,  551,  144,
      557,  144,  563,  144,  548,  144,  549,  144,  144,  144,

      552,  550,  556,  555,  565,  554,  144,  571,  144,  561,
      144,  144,  144,  144,  566,  144,  564,  568,  569,  575,
      144,  144,  567,  144,  144,  572,  144,  144,  144,  578,
      573,  574,  144,  580,  144,  144,  576,  581,  587,  579,
      586,  144,  144,  583,  589,  144,  144,  144,  588,  584,
      144,  582,  590,  144,  591,  585,  144,  595,  144,  144,
      144,  598,  144,  596,  144,  144,  144,  144,  600,  144,
      144,  592,  593,  144,  144,  611,  605,  144,  144,  602,
      144,  597,  604,  609,  601,  144,  144,  617,  144,  144,
      607,  608,  612,  613,  610,  621,  144,  144,  614,  144,

      616,  144,  144,  625,  144,  618,  622,  144,  620,  144,
      619,  623,  629,  144,  144,  144,  144,  144,  144,  144,
      144,  624,  631,  144,  634,  144,  627,  626,  144,  630,
      628,  641,  637,  144,  144,  144,  144,  144,  643,  633,
      638,  636,  635,  650,  639,  640,  642,  144,  144,  144,
      144,  649,  144,  144,  646,  648,  144,  645,  144,  144,
      144,  144,  654,  144,  661,  144,  656,  651,  144,  144,
      144,  727,  652,  653,  659,  657,  144,  660,  665,  662,
      663,  144,  144,  144,  144,  664,  144,  678,  144,  144,
      671,  144,  679,  144,  666,  667,  672,  674,  675,  144,

      144,  673,  144,  144,  144,  680,  144,  144,  682,  686,
      144,  681,  144,  689,  685,  687,  688,  684,  144,  144,
      144,  690,  697,  144,  694,  144,  144,  144,  144,  144,
      696,  695,  144,  144,  144,  144,  693,  698,  144,  700,
      704,  691,  702,  703,  699,  144,  144,  701,  144,  144,
      144,  144,  709,  144,  705,  144,  712,  715,  706,  144,
      711,  717,  144,  144,  144,  144,  144,  144,  144,  714,
      710,  144,  718,  720,  713,  144,  144,  144,  716,  722,
      144,  725,  719,  144,  144,  731,  728,  144,  144,  723,
      732,  724,  144,  726,  734,  144,  729,  144,  144,  245,

      245,  721,  730,  733,  294,  294,  154,  735,  708,  707,
      163,  736,  692,  683,  677,  676,  740,  670,  737,  669,
      738,  668,  149,  183,  658,  655,  148,  647,  745,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      142,  644,  208,  142,  142,  632,  615,  606,  208,  599,
      162,  594,  142,  142,  143,  577,  208,  143,  143,  208,
      143,  562,  560,  559,  171,  553,  143,  143,  190,  190,
      208,  190,  190,  190,  190,  190,  190,  190,  190,  208,
      190,  190,  190,  190,  190,  195,  195,  530,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  192,  192,  176,  192,  192,  192,  192,  192,
      192,  192,  192,  521,  192,  192,  192,  192,  192,  197,
      512,  503,  197,  164,  197,  197,  197,  197,  197,  160,
      208,  208,  197,  197,  197,  197,  199,  199,  481,  199,
      449,  199,  199,  199,  199,  199,  208,  199,  208,  199,
      199,  199,  199,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      203,  203,  203,  203,  435,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  167,  203,  203,  209,  406,  208,

      208,  392,  384,  158,  370,  369,  209,  209,  211,  211,
      211,  211,  211,  211,  211,  360,  211,  211,  211,  211,
      211,  211,  234,  234,  208,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  238,  238,  238,  238,
      238,  208,  238,  238,  238,  238,  238,  238,  238,  238,
      186,  238,  238,  248,  317,  316,  248,  248,  237,  315,
      314,  313,  312,  311,  310,  248,  248,  251,  309,  251,
      308,  307,  302,  301,  300,  251,  253,  299,  298,  253,

      253,  297,  253,  296,  215,  213,  253,  208,  253,  253,
      293,  206,  293,  202,  200,  293,  293,  180,  144,  252,
      293,  293,  250,  249,  293,  293,  198,  247,  198,  246,
      244,  198,  198,  237,  235,  233,  198,  227,  226,  221,
      198,  198,  295,  218,  215,  214,  213,  212,  210,  208,
      207,  295,  295,  358,  206,  202,  163,  162,  148,  144,
      141,  748,  358,  358,  359,  129,  129,  748,  748,  748,
      748,  748,  748,  359,  359,  404,  748,  748,  748,  748,
      748,  748,  748,  748,  404,  404,  405,  748,  748,  748,
      748,  748,  748,  748,  748,  405,  405,  447,  748,  748,

      748,  748,  748,  748,  748,  748,  447,  447,  448,  748,
      748,  748,  748,  748,  748,  748,  748,  448,  448,  492,
      748,  748,  748,  748,  748,  748,  748,  748,  492,  492,
      493,  748,  748,  748,  748,  748,  748,  748,  748,  493,
      493,  532,  748,  748,  748,  748,  748,  748,  748,  748,
      532,  532,  533,  748,  748,  748,  748,  748,  748,  748,
      748,  533,  533,  570,  748,  748,  748,  748,  748,  748,
      748,  748,  570,  570,  603,  748,  748,  748,  748,  748,
      748,  748,  748,  603,  603,   31,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748
    } ;

static yyconst flex_int16_t yy_chk[2032] =
    {   0,
        1,    1,    1,    1,    0,    1,    1,    1,   17,   17,
        0,    1,    0,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    3,  745,    3,
        3,    3,    3,   18,   18,    3,   45,    3,    3,    3,
        3,    3,    3,    4,    4,    4,    4,   42,    4,    4,
        4,    4,   53,   42,    4,   45,    4,    4,    4,    4,

        4,    4,    5,    5,    5,    5,   53,    5,    5,    5,
        5,  740,   53,    5,  737,    5,    5,    5,    5,    5,
        5,    6,    6,    6,    6,   43,    6,    6,    6,    6,
        7,    7,    6,    7,    6,    6,    6,    6,    6,    6,
        8,    8,   96,    8,  115,  115,    7,   96,   43,  161,
      241,  241,   43,  161,   43,  736,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,   11,   11,   11,   11,   12,   12,   12,   12,
       13,   13,   13,   14,   14,   14,   11,   44,   19,   19,
       12,   13,   19,   19,   14,   15,   15,   15,   20,   20,
       49,  152,   20,   20,   19,   57,   15,   39,  267,   57,
       44,  152,  267,   15,   20,   39,   15,   50,   15,   15,
       57,   50,   15,   49,   39,   15,   15,   15,   41,   55,
      100,   15,   15,   39,   41,   15,   16,   16,   16,   48,
       62,  150,  101,   55,   50,   48,   54,   16,   41,   98,
      100,  105,   41,   48,   16,   62,  101,   16,  150,   16,
       16,  145,   98,   16,  105,   54,   16,   16,   16,  145,

       54,  269,   16,   16,  735,  269,   16,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   23,   23,   23,   23,   56,   23,   23,   23,
      151,  734,   56,   23,  172,   23,   23,   23,   23,   23,
       23,  147,  172,  157,   23,   24,   24,   24,   24,  151,
       24,   24,   24,  104,   56,  146,   24,  104,   24,   24,
       24,   24,   24,   24,  157,  146,  147,   24,   27,   27,

       27,  153,  146,  104,  155,   51,  165,   27,  732,   27,
       27,   51,  159,  174,  177,   51,   27,   27,   27,   27,
       27,   27,   28,   28,   28,   51,  153,  155,  156,   51,
      189,   28,  159,   28,   28,  165,  166,  177,  156,  174,
       28,   28,   28,   28,   28,   28,   29,   29,   29,   29,
      187,   29,   29,   29,  166,  166,  187,   29,  189,   52,
       29,   29,   29,  178,   29,   30,   30,   30,   30,   52,
       30,   30,   30,   52,   71,   71,   30,   71,  175,   30,
       30,   30,  168,   30,  178,   52,   61,   61,  175,  385,
       71,   61,   61,   61,  168,  170,  181,   61,  385,   61,

       61,   61,   61,   61,   61,   63,   63,  169,  184,  170,
       63,   63,   63,  169,  181,  170,   63,  185,   63,   63,
       63,   63,   63,   63,   68,   68,  224,  185,  169,  271,
       68,   68,  184,  224,  223,   68,  223,   68,  179,   68,
      191,   68,   68,   70,   70,  179,  188,  110,  110,   70,
       70,  110,  110,  271,   70,  191,   70,  173,   70,  179,
       70,   70,  190,  110,  256,  173,  190,  257,  173,  188,
      192,  254,  194,  201,  201,  255,  201,  190,  173,  173,
      257,  254,  173,  258,  256,  192,  194,  194,  259,  201,
      236,  236,  260,  261,  236,  236,  262,  264,  255,  263,

      258,  265,  266,  261,  270,  268,  236,  272,  273,  274,
      270,  264,  276,  259,  260,  268,  262,  275,  263,  265,
      278,  277,  279,  280,  281,  266,  283,  289,  273,  282,
      272,  277,  276,  275,  286,  273,  284,  278,  274,  285,
      284,  288,  287,  291,  293,  293,  280,  318,  279,  281,
      289,  282,  287,  283,  285,  286,  292,  319,  320,  321,
      292,  322,  291,  285,  323,  322,  326,  288,  318,  321,
      323,  327,  328,  330,  323,  333,  331,  332,  334,  321,
      335,  332,  319,  330,  336,  333,  320,  331,  337,  326,
      339,  341,  338,  342,  336,  328,  327,  334,  338,  343,

      345,  344,  346,  348,  335,  343,  352,  349,  350,  353,
      354,  337,  346,  348,  341,  344,  342,  349,  350,  351,
      339,  349,  356,  361,  355,  364,  352,  351,  355,  343,
      345,  354,  357,  353,  365,  362,  356,  363,  357,  362,
      366,  363,  367,  368,  364,  371,  373,  374,  361,  371,
      367,  375,  376,  377,  366,  378,  373,  365,  382,  381,
      379,  380,  368,  383,  389,  393,  382,  383,  374,  378,
      379,  375,  380,  381,  386,  387,  388,  390,  386,  376,
      388,  390,  377,  387,  394,  395,  396,  389,  393,  397,
      398,  399,  401,  400,  396,  403,  395,  408,  401,  402,

      407,  386,  411,  412,  407,  409,  414,  415,  416,  394,
      413,  408,  397,  398,  400,  409,  399,  412,  402,  413,
      417,  403,  416,  418,  419,  420,  422,  411,  421,  413,
      423,  414,  415,  424,  425,  420,  426,  428,  430,  427,
      418,  428,  431,  424,  417,  427,  429,  419,  430,  421,
      432,  433,  431,  423,  434,  439,  441,  422,  437,  425,
      434,  433,  427,  438,  437,  440,  426,  438,  442,  443,
      429,  429,  444,  445,  442,  432,  446,  450,  452,  440,
      439,  441,  453,  455,  444,  445,  454,  450,  457,  443,
      462,  459,  460,  463,  450,  459,  464,  452,  465,  457,

      454,  446,  466,  467,  468,  469,  471,  472,  466,  453,
      473,  460,  465,  474,  455,  476,  475,  472,  477,  464,
      462,  463,  482,  478,  476,  485,  480,  468,  467,  483,
      486,  487,  471,  473,  482,  469,  475,  480,  488,  474,
      486,  489,  477,  478,  491,  494,  485,  483,  495,  487,
      497,  489,  496,  499,  495,  500,  502,  491,  498,  499,
      497,  488,  501,  496,  494,  504,  498,  502,  505,  504,
      506,  501,  501,  507,  505,  500,  508,  510,  509,  501,
      513,  514,  515,  516,  522,  518,  524,  501,  509,  518,
      516,  525,  524,  527,  506,  526,  507,  528,  529,  534,

      510,  508,  515,  514,  526,  513,  535,  534,  531,  522,
      536,  539,  537,  538,  527,  541,  525,  529,  531,  538,
      542,  544,  528,  545,  546,  535,  548,  543,  549,  541,
      536,  537,  547,  543,  550,  551,  539,  543,  549,  542,
      548,  554,  552,  545,  551,  555,  556,  564,  550,  546,
      558,  544,  552,  561,  554,  547,  563,  558,  567,  568,
      569,  564,  571,  561,  572,  574,  575,  579,  567,  576,
      578,  555,  556,  580,  581,  579,  572,  582,  585,  569,
      584,  563,  571,  576,  568,  586,  587,  585,  588,  592,
      574,  575,  580,  581,  578,  589,  595,  590,  582,  589,

      584,  591,  593,  592,  597,  586,  590,  596,  588,  598,
      587,  591,  597,  600,  602,  604,  605,  607,  608,  612,
      609,  591,  600,  610,  604,  611,  595,  593,  614,  598,
      596,  612,  608,  617,  613,  618,  620,  621,  614,  602,
      609,  607,  605,  622,  610,  611,  613,  622,  623,  624,
      625,  621,  626,  629,  618,  620,  630,  617,  635,  637,
      633,  638,  626,  634,  635,  639,  629,  623,  641,  640,
      642,  718,  624,  625,  633,  630,  651,  634,  640,  637,
      638,  649,  650,  652,  659,  639,  660,  657,  653,  662,
      649,  657,  659,  664,  641,  642,  650,  652,  653,  661,

      665,  651,  667,  666,  672,  660,  671,  673,  662,  666,
      674,  661,  678,  672,  665,  667,  671,  664,  679,  680,
      681,  673,  682,  684,  679,  685,  682,  686,  688,  693,
      681,  680,  689,  694,  691,  690,  678,  684,  697,  686,
      691,  674,  689,  690,  685,  698,  700,  688,  699,  701,
      702,  703,  697,  704,  693,  705,  700,  703,  694,  710,
      699,  705,  706,  709,  714,  713,  715,  716,  717,  702,
      698,  723,  706,  710,  701,  719,  720,  722,  704,  713,
      724,  716,  709,  725,  726,  723,  719,  728,  730,  714,
      724,  715,  729,  717,  726,  731,  720,  733,  738,  776,

      776,  712,  722,  725,  782,  782,  711,  728,  696,  695,
      687,  729,  675,  663,  656,  654,  733,  648,  730,  646,
      731,  645,  643,  636,  631,  628,  627,  619,  738,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      762,  616,  603,  762,  762,  601,  583,  573,  570,  566,
      565,  557,  762,  762,  763,  540,  533,  763,  763,  532,
      763,  523,  520,  519,  517,  511,  763,  763,  764,  764,
      493,  764,  764,  764,  764,  764,  764,  764,  764,  492,
      764,  764,  764,  764,  764,  765,  765,  490,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  766,  766,  484,  766,  766,  766,  766,  766,
      766,  766,  766,  479,  766,  766,  766,  766,  766,  767,
      470,  461,  767,  458,  767,  767,  767,  767,  767,  456,
      448,  447,  767,  767,  767,  767,  768,  768,  436,  768,
      406,  768,  768,  768,  768,  768,  405,  768,  404,  768,
      768,  768,  768,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      770,  770,  770,  770,  391,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  372,  770,  770,  771,  360,  359,

      358,  347,  340,  329,  325,  324,  771,  771,  772,  772,
      772,  772,  772,  772,  772,  317,  772,  772,  772,  772,
      772,  772,  773,  773,  295,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  775,  775,  775,  775,
      775,  294,  775,  775,  775,  775,  775,  775,  775,  775,
      290,  775,  775,  777,  249,  246,  777,  777,  238,  233,
      232,  231,  230,  229,  228,  777,  777,  778,  227,  778,
      226,  225,  222,  221,  220,  778,  779,  219,  218,  779,

      779,  217,  779,  216,  215,  213,  779,  209,  779,  779,
      780,  205,  780,  203,  198,  780,  780,  182,  143,  138,
      780,  780,  133,  127,  780,  780,  781,  125,  781,  121,
      119,  781,  781,  112,  109,  106,  781,  103,  102,   99,
      781,  781,  783,   97,   95,   94,   90,   89,   84,   80,
       79,  783,  783,  784,   75,   73,   47,   46,   40,   38,
       35,   31,  784,  784,  785,   26,   25,    0,    0,    0,
        0,    0,    0,  785,  785,  786,    0,    0,    0,    0,
        0,    0,    0,    0,  786,  786,  787,    0,    0,    0,
        0,    0,    0,    0,    0,  787,  787,  788,    0,    0,

        0,    0,    0,    0,    0,    0,  788,  788,  789,    0,
        0,    0,    0,    0,    0,    0,    0,  789,  789,  790,
        0,    0,    0,    0,    0,    0,    0,    0,  790,  790,
      791,    0,    0,    0,    0,    0,    0,    0,    0,  791,
      791,  792,    0,    0,    0,    0,    0,    0,    0,    0,
      792,  792,  793,    0,    0,    0,    0,    0,    0,    0,
        0,  793,  793,  794,    0,    0,    0,    0,    0,    0,
        0,    0,  794,  794,  795,    0,    0,    0,    0,    0,
        0,    0,    0,  795,  795,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.lxx"
/*
    Copyright (C) 2005-2008  Michel de Boer <michel@twinklephone.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#line 20 "scanner.lxx"
#include <cstdio>
#include <cstring>
#include <math.h>
#include <string>
#include "parse_ctrl.h"
#include "parser.h"
#include "util.h"
#include "audits/memman.h"

using namespace std;














#line 1318 "scanner.cxx"

#define INITIAL 0
#define C_URI 1
#define C_URI_SPECIAL 2
#define C_QSTRING 3
#define C_LANG 4
#define C_WORD 5
#define C_NUM 6
#define C_DATE 7
#define C_LINE 8
#define C_COMMENT 9
#define C_NEW 10
#define C_AUTH_SCHEME 11
#define C_RPAREN 12
#define C_IPV6ADDR 13
#define C_PARAMVAL 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 58 "scanner.lxx"

	switch (t_parser::context) {
	case t_parser::X_URI:		BEGIN(C_URI); break;
	case t_parser::X_URI_SPECIAL:	BEGIN(C_URI_SPECIAL); break;
	case t_parser::X_LANG:		BEGIN(C_LANG); break;
	case t_parser::X_WORD:		BEGIN(C_WORD); break;
	case t_parser::X_NUM:		BEGIN(C_NUM); break;
	case t_parser::X_DATE:		BEGIN(C_DATE); break;
	case t_parser::X_LINE:		BEGIN(C_LINE); break;
	case t_parser::X_COMMENT:	BEGIN(C_COMMENT); break;
	case t_parser::X_NEW:		BEGIN(C_NEW); break;
	case t_parser::X_AUTH_SCHEME:	BEGIN(C_AUTH_SCHEME); break;
	case t_parser::X_IPV6ADDR:	BEGIN(C_IPV6ADDR); break;
	case t_parser::X_PARAMVAL:	BEGIN(C_PARAMVAL); break;
	default:			BEGIN(INITIAL);
	}

	/* Headers */
#line 1517 "scanner.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 749 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1986 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 76 "scanner.lxx"
{ return T_HDR_ACCEPT; }
	YY_BREAK
case 2:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 15;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 77 "scanner.lxx"
{ return T_HDR_ACCEPT_ENCODING; }
	YY_BREAK
case 3:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 15;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 78 "scanner.lxx"
{ return T_HDR_ACCEPT_LANGUAGE; }
	YY_BREAK
case 4:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 79 "scanner.lxx"
{ return T_HDR_ALERT_INFO; }
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 80 "scanner.lxx"
{ return T_HDR_ALLOW; }
	YY_BREAK
case 6:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 81 "scanner.lxx"
{ return T_HDR_ALLOW_EVENTS; }
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 82 "scanner.lxx"
{ return T_HDR_AUTHENTICATION_INFO; }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 13;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 83 "scanner.lxx"
{ return T_HDR_AUTHORIZATION; }
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 84 "scanner.lxx"
{ return T_HDR_CALL_ID; }
	YY_BREAK
case 10:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 85 "scanner.lxx"
{ return T_HDR_CALL_INFO; }
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 86 "scanner.lxx"
{ return T_HDR_CONTACT; }
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 87 "scanner.lxx"
{ return T_HDR_CONTENT_DISP; }
	YY_BREAK
case 13:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 88 "scanner.lxx"
{ return T_HDR_CONTENT_ENCODING; }
	YY_BREAK
case 14:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 16;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 89 "scanner.lxx"
{ return T_HDR_CONTENT_LANGUAGE; }
	YY_BREAK
case 15:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 90 "scanner.lxx"
{ return T_HDR_CONTENT_LENGTH; }
	YY_BREAK
case 16:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 91 "scanner.lxx"
{ return T_HDR_CONTENT_TYPE; }
	YY_BREAK
case 17:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 92 "scanner.lxx"
{ return T_HDR_CSEQ; }
	YY_BREAK
case 18:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 93 "scanner.lxx"
{ return T_HDR_DATE; }
	YY_BREAK
case 19:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 94 "scanner.lxx"
{ return T_HDR_ERROR_INFO; }
	YY_BREAK
case 20:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 95 "scanner.lxx"
{ return T_HDR_EVENT; }
	YY_BREAK
case 21:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 96 "scanner.lxx"
{ return T_HDR_EXPIRES; }
	YY_BREAK
case 22:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 97 "scanner.lxx"
{ return T_HDR_FROM; }
	YY_BREAK
case 23:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 98 "scanner.lxx"
{ return T_HDR_IN_REPLY_TO; }
	YY_BREAK
case 24:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 99 "scanner.lxx"
{ return T_HDR_MAX_FORWARDS; }
	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 100 "scanner.lxx"
{ return T_HDR_MIN_EXPIRES; }
	YY_BREAK
case 26:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 101 "scanner.lxx"
{ return T_HDR_MIME_VERSION; }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 102 "scanner.lxx"
{ return T_HDR_ORGANIZATION; }
	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 103 "scanner.lxx"
{ return T_HDR_P_ASSERTED_IDENTITY; }
	YY_BREAK
case 29:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 20;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 104 "scanner.lxx"
{ return T_HDR_P_PREFERRED_IDENTITY; }
	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 105 "scanner.lxx"
{ return T_HDR_PRIORITY; }
	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 106 "scanner.lxx"
{ return T_HDR_PRIVACY; }
	YY_BREAK
case 32:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 18;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 107 "scanner.lxx"
{ return T_HDR_PROXY_AUTHENTICATE; }
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 19;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 108 "scanner.lxx"
{ return T_HDR_PROXY_AUTHORIZATION; }
	YY_BREAK
case 34:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 13;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 109 "scanner.lxx"
{ return T_HDR_PROXY_REQUIRE; }
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 110 "scanner.lxx"
{ return T_HDR_RACK; }
	YY_BREAK
case 36:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 111 "scanner.lxx"
{ return T_HDR_RECORD_ROUTE; }
	YY_BREAK
case 37:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 112 "scanner.lxx"
{ return T_HDR_REFER_SUB; }
	YY_BREAK
case 38:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 113 "scanner.lxx"
{ return T_HDR_REFER_TO; }
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 114 "scanner.lxx"
{ return T_HDR_REFERRED_BY; }
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 115 "scanner.lxx"
{ return T_HDR_REPLACES; }
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 116 "scanner.lxx"
{ return T_HDR_REPLY_TO; }
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 117 "scanner.lxx"
{ return T_HDR_REQUIRE; }
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 118 "scanner.lxx"
{ return T_HDR_RETRY_AFTER; }
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 119 "scanner.lxx"
{ return T_HDR_ROUTE; }
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 120 "scanner.lxx"
{ return T_HDR_RSEQ; }
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 121 "scanner.lxx"
{ return T_HDR_SERVER; }
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 122 "scanner.lxx"
{ return T_HDR_SIP_ETAG; }
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 123 "scanner.lxx"
{ return T_HDR_SIP_IF_MATCH; }
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 124 "scanner.lxx"
{ return T_HDR_SUBJECT; }
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 18;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 125 "scanner.lxx"
{ return T_HDR_SUBSCRIPTION_STATE; }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 126 "scanner.lxx"
{ return T_HDR_SUPPORTED; }
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 127 "scanner.lxx"
{ return T_HDR_TIMESTAMP; }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 128 "scanner.lxx"
{ return T_HDR_TO; }
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 129 "scanner.lxx"
{ return T_HDR_UNSUPPORTED; }
	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 130 "scanner.lxx"
{ return T_HDR_USER_AGENT; }
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 131 "scanner.lxx"
{ return T_HDR_VIA; }
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 132 "scanner.lxx"
{ return T_HDR_WARNING; }
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 16;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 133 "scanner.lxx"
{ return T_HDR_WWW_AUTHENTICATE; }
	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_HDR_UNKNOWN; }
	YY_BREAK
/* Token as define in RFC 3261 */
case 60:
YY_RULE_SETUP
#line 139 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
		  MEMMAN_NEW(yylval.yyt_str);
		  return T_TOKEN; }
	YY_BREAK
/* Switch to quoted string context */
case 61:
YY_RULE_SETUP
#line 144 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
/* End of line */
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 147 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 148 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "scanner.lxx"
/* Skip white space */
	YY_BREAK
/* Single character token */
case 65:
YY_RULE_SETUP
#line 153 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
/* URI. 
	   This context scans a URI including parameters.
	   The syntax of a URI will be checked outside the scanner 
	 */
case 66:
YY_RULE_SETUP
#line 159 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
case 67:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_DISPLAY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 164 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_URI; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "scanner.lxx"
{ return T_URI_WILDCARD; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_URI; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 174 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 175 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
/* URI special case.
	   In several headers (eg. From, To, Contact, Reply-To) the URI
	   can be enclosed by < and >
	   If it is enclosed then parameters belong to the URI, if it
	   is not enclosed then parameters belong to the header.
	   Parameters are seperated by a semi-colon. 
	   For the URI special case, parameters belong to the header.
	   If the parser receives a < from the scanner, then the parser
	   will switch to the normal URI case.
	   The syntax of a URI will be checked outside the scanner 
	 */
case 74:
YY_RULE_SETUP
#line 188 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
case 75:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 189 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_DISPLAY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 193 "scanner.lxx"
{ return T_URI_WILDCARD; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 194 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_URI; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 198 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 199 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 200 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
/* Quoted string (starting after open quote, closing quote
	   will be consumed but not returned. */
case 81:
YY_RULE_SETUP
#line 204 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 205 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 206 "scanner.lxx"
{ yy_pop_state();
			  	  yytext[strlen(yytext)-1] = '\0';
			  	  yylval.yyt_str = new string(unescape(string(yytext)));
				  MEMMAN_NEW(yylval.yyt_str);
			  	  return T_QSTRING; }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 211 "scanner.lxx"
{ yy_pop_state(); return T_ERROR; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 212 "scanner.lxx"
{ yy_pop_state(); return T_ERROR; }
	YY_BREAK
/* Comment (starting after LPAREN till RPAREN) */
case 86:
YY_RULE_SETUP
#line 215 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 216 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 217 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 218 "scanner.lxx"
{ t_parser::inc_comment_level(); yymore(); }
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "scanner.lxx"
{ if (t_parser::dec_comment_level()) {
					BEGIN(C_RPAREN);
					yymore();
				  } else {
				  	yylval.yyt_str = new string(yytext);
					MEMMAN_NEW(yylval.yyt_str);
			  	  	return T_COMMENT;
				  }
				}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 228 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 229 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 230 "scanner.lxx"
{ BEGIN(C_COMMENT); yymore(); }
	YY_BREAK
/* Language tag */
case 94:
YY_RULE_SETUP
#line 233 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
					  MEMMAN_NEW(yylval.yyt_str);
					  return T_LANG; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 236 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 237 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 238 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 239 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Word */
case 99:
YY_RULE_SETUP
#line 242 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_WORD; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 245 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 246 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 247 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 248 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Number */
case 104:
YY_RULE_SETUP
#line 251 "scanner.lxx"
{ yylval.yyt_ulong = strtoul(yytext, NULL, 10); return T_NUM; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 252 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 253 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 254 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 255 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Date */
case 109:
YY_RULE_SETUP
#line 258 "scanner.lxx"
{ yylval.yyt_int = 1; return T_WKDAY; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 259 "scanner.lxx"
{ yylval.yyt_int = 2; return T_WKDAY; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 260 "scanner.lxx"
{ yylval.yyt_int = 3; return T_WKDAY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 261 "scanner.lxx"
{ yylval.yyt_int = 4; return T_WKDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 262 "scanner.lxx"
{ yylval.yyt_int = 5; return T_WKDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 263 "scanner.lxx"
{ yylval.yyt_int = 6; return T_WKDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 264 "scanner.lxx"
{ yylval.yyt_int = 0; return T_WKDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 265 "scanner.lxx"
{ yylval.yyt_int = 0; return T_MONTH; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 266 "scanner.lxx"
{ yylval.yyt_int = 1; return T_MONTH; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 267 "scanner.lxx"
{ yylval.yyt_int = 2; return T_MONTH; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 268 "scanner.lxx"
{ yylval.yyt_int = 3; return T_MONTH; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 269 "scanner.lxx"
{ yylval.yyt_int = 4; return T_MONTH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 270 "scanner.lxx"
{ yylval.yyt_int = 5; return T_MONTH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 271 "scanner.lxx"
{ yylval.yyt_int = 6; return T_MONTH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 272 "scanner.lxx"
{ yylval.yyt_int = 7; return T_MONTH; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 273 "scanner.lxx"
{ yylval.yyt_int = 8; return T_MONTH; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 274 "scanner.lxx"
{ yylval.yyt_int = 9; return T_MONTH; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 275 "scanner.lxx"
{ yylval.yyt_int = 10; return T_MONTH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 276 "scanner.lxx"
{ yylval.yyt_int = 11; return T_MONTH; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 277 "scanner.lxx"
{ return T_GMT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 278 "scanner.lxx"
{ yylval.yyt_ulong = strtoul(yytext, NULL, 10); return T_NUM; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 279 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 280 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 281 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 282 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Get all text till end of line */
case 134:
YY_RULE_SETUP
#line 285 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_LINE; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 288 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 289 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 290 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Start of a new message */
case 138:
YY_RULE_SETUP
#line 293 "scanner.lxx"
{ return T_SIP; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 294 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_METHOD; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 297 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 298 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 299 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 300 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Authorization scheme */
case 144:
YY_RULE_SETUP
#line 303 "scanner.lxx"
{ return T_AUTH_DIGEST; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 304 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			 	  MEMMAN_NEW(yylval.yyt_str);
				  return T_AUTH_OTHER; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 307 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 308 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 309 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 310 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* IPv6 address
	 * NOTE: the validity of the format is not checked here.
	 */
case 150:
YY_RULE_SETUP
#line 315 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
				  MEMMAN_NEW(yylval.yyt_str);
				  return T_IPV6ADDR; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 318 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 319 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 320 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 321 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Parameter values may contain an IPv6 address or reference. */
case 155:
YY_RULE_SETUP
#line 324 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
				     MEMMAN_NEW(yylval.yyt_str);
				     return T_PARAMVAL; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 327 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 328 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 329 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 330 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 331 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 332 "scanner.lxx"
ECHO;
	YY_BREAK
#line 2727 "scanner.cxx"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(C_URI):
			case YY_STATE_EOF(C_URI_SPECIAL):
			case YY_STATE_EOF(C_QSTRING):
			case YY_STATE_EOF(C_LANG):
			case YY_STATE_EOF(C_WORD):
			case YY_STATE_EOF(C_NUM):
			case YY_STATE_EOF(C_DATE):
			case YY_STATE_EOF(C_LINE):
			case YY_STATE_EOF(C_COMMENT):
			case YY_STATE_EOF(C_NEW):
			case YY_STATE_EOF(C_AUTH_SCHEME):
			case YY_STATE_EOF(C_RPAREN):
			case YY_STATE_EOF(C_IPV6ADDR):
			case YY_STATE_EOF(C_PARAMVAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 749 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 749 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 748);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 332 "scanner.lxx"
